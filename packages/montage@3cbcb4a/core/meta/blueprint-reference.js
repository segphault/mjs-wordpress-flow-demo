"use strict";var Montage=require("../core").Montage,Promise=require("../promise").Promise,BlueprintModule=require("./blueprint"),BinderModule=require("./binder"),RemoteReference=require("./remote-reference").RemoteReference,BinderReference=require("./binder-reference").BinderReference,logger=require("../logger").logger("blueprint");exports.BlueprintReference=RemoteReference.specialize({constructor:{value:function(){this.superForValue("constructor")()}},identifier:{get:function(){return this._reference||(this._reference=this.referenceFromValue(this._value)),["blueprint",(this._reference.blueprintName||"unnamed").toLowerCase(),"reference"].join("_")}},valueFromReference:{value:function(e){e.blueprintName;var t=e.blueprintModule;e.prototypeName,e.moduleId;var n=e.binderReference,r=Promise.resolve(BinderModule.Binder.manager.defaultBinder);return n&&(r=BinderReference.valueFromReference(n,require)),r.then(function(e){if(e){var n=require("./module-blueprint");return n.ModuleBlueprint.getBlueprintWithModuleId(t.id,t.require).then(function(n){if(n)return e.addBlueprint(n),n;throw Error("Error cannot find Blueprint "+t)})}return BlueprintModule.Blueprint.getBlueprintWithModuleId(t,require)})}},referenceFromValue:{value:function(e){var t={};return t.blueprintName=e.name,t.blueprintModule=e.blueprintInstanceModule,e.binder&&!e.binder.isDefault&&(t.binderReference=BinderReference.referenceFromValue(e.binder)),t}}});